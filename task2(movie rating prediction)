# movie rating prediction
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score
import warnings

warnings.filterwarnings('ignore')

# Load the dataset
file_path = "/content/IMDb Movies India.csv"
movies_df = pd.read_csv(file_path, encoding='latin1')

# Display the first few rows of the dataset
print(movies_df.head())

# Data preprocessing
# Clean 'Votes' column to keep only numeric values
def clean_votes(val):
    if isinstance(val, str):  # Check if the value is a string
        val = val.replace(',', '').replace('$', '')
        if 'M' in val:
            val = float(val.replace('M', '')) * 1e6
        return float(val)
    return val  # Return the value as is if it's already numeric

movies_df['Votes'] = movies_df['Votes'].apply(clean_votes)

# Convert 'Duration' to numeric values
movies_df['Duration'] = movies_df['Duration'].apply(lambda x: int(x.split()[0]) if pd.notnull(x) else np.nan)

# Combine actor columns into one
movies_df['Actors'] = movies_df[['Actor 1', 'Actor 2', 'Actor 3']].astype(str).agg(' '.join, axis=1)

# Feature selection and target variable
features = movies_df[['Year', 'Duration', 'Votes']]
target = movies_df['Rating']

# Handle missing values
features.fillna(features.mean(), inplace=True)
target.fillna(target.mean(), inplace=True)  # Handle missing target values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.33, random_state=42)

# Initialize regression models
linear_model = LinearRegression()
random_forest_model = RandomForestRegressor(n_estimators=100, random_state=42)
knn_model = KNeighborsRegressor(n_neighbors=3)

# Fit the models
linear_model.fit(X_train, y_train)
random_forest_model.fit(X_train, y_train)
knn_model.fit(X_train, y_train)

# Evaluate the models
def evaluate_model(model, X, y):
    predictions = model.predict(X)
    mse = mean_squared_error(y, predictions)
    r2 = r2_score(y, predictions)
    return mse, r2

mse_lin, r2_lin = evaluate_model(linear_model, X_test, y_test)
mse_rf, r2_rf = evaluate_model(random_forest_model, X_test, y_test)
mse_knn, r2_knn = evaluate_model(knn_model, X_test, y_test)

# Print model performance metrics
print(f"Linear Regression - MSE: {mse_lin:.2f}, R2: {r2_lin:.2f}")
print(f"Random Forest - MSE: {mse_rf:.2f}, R2: {r2_rf:.2f}")
print(f"KNN - MSE: {mse_knn:.2f}, R2: {r2_knn:.2f}")

# Plot distribution of ratings
sns.histplot(movies_df['Rating'], bins=20, kde=True, color='blue')
plt.title('Movie Ratings Distribution')
plt.show()

# Plot distribution of votes
sns.histplot(movies_df['Votes'], bins=20, kde=True, color='green')
plt.title('Votes Distribution')
plt.show()

# Scatter plot of Duration vs Rating
plt.scatter(movies_df['Duration'], movies_df['Rating'], alpha=0.5)
plt.title('Duration vs Rating')
plt.xlabel('Duration')
plt.ylabel('Rating')
plt.show()

# Scatter plot of Votes vs Rating
plt.scatter(movies_df['Votes'], movies_df['Rating'], alpha=0.5, color='red')
plt.title('Votes vs Rating')
plt.xlabel('Votes')
plt.ylabel('Rating')
plt.show()
